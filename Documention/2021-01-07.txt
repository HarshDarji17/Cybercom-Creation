                         *********BRANCH MANAGEMENT***********

 1.seeing all the branch use command:

              $ git branch

 2.Create new branch use command:

              $ git branch branch name

 3.how to change master to local branch use command:

              $ git checkoout Local branch name

 4.For getting all your branches with the latest commit use command:

              $ git branch -v  

 5.For getting all your merged branch use command:
             
              $ git branch --merged      

 6.For getting the branches that are not merged use command:

              $ git branch --no-merged 

 7.If you are deleting the branch that are not merged using the command below you will get error use command:

    $git branch -d "branchname"

    so delte it write "D" onstaead of "d"

    $ git branch -D <branchname> 

                             ****************GIT REVERT***********   

                                    RESET -> BEFORE COMMIT 
                                    REVERT-> AFTER COMMIT 

   - The Revert Command helps you undo an existing commmit.
   - It does not delet any data in this process instead.
   - Rather git  creates a new ccommit with the include files reverted to their previous state.
   - So, Your version control history moves forward while the state  of your file moves backword.

    1.GIT REVERT TO PREVIOUS COMMIT:

                   $ git revert <commithash> 

            write in differnt ways:
                                    
        - In this case commit will not happen but the revert has been occured now its your responsibility to commit the message.

                   $ git revert -n <commithash> 
                       here, -n means no-commit  

    2.GIT REVERT MERGE:
        - A merge in Git is a commit that has at least two parents.
        - It brings together multiple lines of development. 
        - In a work-flow where features are developed in branches and then merged into a mainline,
            the merge commits would typically have two parents.

                    $ git log

             $ git revert <commithash> -m 1  
                 here. -m 1 is used for the first parent as the mainline.
 
                            ***************GIT REBASE*************
   - Rebasing is a process to reapply commits on top of another base trip. 
   - It is used to apply a sequence of commits from distinct branches into a final commit.
   - It is an alternative of git merge command. 
   - Rebasing can be done when you want your branch commit to push over the commit of your master branch.           

         *COMMAND:
                $ git checkout -b contect  - creat another branch
                   * some changes to contect branch:
                $ git add index.html
                $ git commit -m "Simple.html put"
                $ git add style.css
                $ git commit -m "Sample.html put"
                   * move on master branch:
                   $ git checkout master 
                    
                      then rebase the contect ranch commit:
                       
                            $ git rebase contect

                         ************GIT SQUASH*****************

    - In Git, the term squash is used to squash the previous commits into one. It is not a command; instead, it is a keyword. 
    - The squash is an excellent technique for group-specific changes before forwarding them to others.
    - You can merge several commits into a single commit with the compelling interactive rebase command.
           
       For squashing your commit message to one message you follow these command in the fashion shown below:                               
         
         1.choose the number of commit to squash:

                $ git rebase -i HEAD~3
                   here.This will open vim editor press 'i' to go into insert mode and then change "pick" with "squash" only you have to change all except the first pick otherwise you will get error.
         
         2.Again vimeditor will open now write this symbol in front of those commit that you dont't want "#" and you can write your commit here also
           and then pres "esc"and then ":wq"
        
          3.Now all your commit will get squash you chan check this by using command:
              
                   $ git log --oneline

                              **********USEFUL COMMAND************


     1. how to deleting the file:

                 $ git rm index.html

     2. renaming the file

                 $ git mv first.txt first_renamed.txt

     3.The below command will list the branches on the local and remote repository.
                
                 $ git branch -a

     4.If you want to perform add and commit in one command you use the command:

                  $ git commit -a -m "commit-meassage"
                               
                       here,

                         git commit -a :- It's job is to commit all the changes that are staged.
                         git commit -m :- It's job is to specify the commit message when you're making a commit.

     5.How To Delet The Branch From GITHUB Using GIT?

                      $   git push -d origin <branch-name>

     6.How To See The Differnce Between Working Area And STAGED AREA?

                     $ git diff

                    It will show you the difference between the working code and staged area.

     7.How To See The Differnce Between Working Area And Previous Commit?
    
                     $ git diff --staged           

                                            