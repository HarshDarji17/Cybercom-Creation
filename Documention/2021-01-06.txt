                                      *Git & Github*
 *MERGE THE PULL REQUEST ON GITHUB

  * What is Fork?
    -A GitHub fork is a copy of a repository (repo) that sits in your account rather than the account from which you forked the data from.
    -Once you have forked a repo, you own your forked copy.
    -This means that you can edit the contents of your forked repository without impacting the parent repo.        

    -So he will first push the changes from his local rep to remote repo using the command:
      Syntax:
          $ git push origin master

      
     - And then he will made a pull request and can add a short message to the real author of the repo
       explaining the changes that he have made.
     - On the author side he will see the pull request from the contributor if no merge conflict is occuring he will merge the pull request
       and the changes will be modified to his original repo
   
     - If author want changes in local rep too then he can write commanfd like:
      Syntax:
              $ git pull    


                                ************ Git Reset  ***********
     - The term reset stands for undoing changes. The git reset command is used to reset the changes.
     - The git reset command has three core forms of invocation. 
     - These forms are as follows.

            1>Soft
            2>Mixed
            3>Hard

     1.GIT RESET SOFT:
         -When the --soft argument is passed, the ref pointers are updated and the reset stops there. 
         -The Staging Index and the Working Directory are left untouched.

         Syntax:
                        $ git reset --soft HEAD~<no-of-commit>
        
        - SOFT means only commit get deleted but not the code.
        -  "<no-of-commit>" means the no of commit you want to delete like HEAD~1 so the recent commit get deleted.
       
      2. GIT RESET MIXED:
        - This is the default operating mode. The ref pointers are updated. 
        - The Staging Index is reset to the state of the specified commit.           

          Syntax:
                       $git reset --mixed HEAD~<no-of-commit>
        - MIXED means code remain intact and code comes into unstagged area. 
        - "<no-of-commit>" means the no of commit you want to delete like HEAD~1 so the recent commit get deleted.

      3. GIT RESET HARD:
        - This is the most direct, DANGEROUS, and frequently used option.
        - When passed --hard The Commit History ref pointers are updated to the specified commit. 
        - Then, the Staging Index and Working Directory are reset to match that of the specified commit.
         
            Syntax:
                          $git reset --hard HEAD~<no-of-commit>

        - HARD means with the commit all the code of the same commit will also get deleted.
        - "<no-of-commit>" means the no of commit you want to delete like HEAD~1 so the recent commit get deleted.
                  
                             *************USEFUl COMMAND ************ 
      * HOW TO DELETE THE BRANCH FROM GITHUB USING GIT:

             Syntax:
                    git push -d origin <branch-name>  

      * HOW TO REMOVE UNTRACKED FILES:   

             Syntax:
                     1. git clean -n 
                         -  used for untrackrd files to dry run means would you ask the remove file.          
                     2. git clean -f
                         -  used for untracked files to forcefully removed. not ask the would you delete. 
     * HOW TO SHOW COMMMIT:
            Syntax:
                   $ git log
                        - used for show the commite in hexacode. in 40 letters.
                   $ git log --oneline
                        - Short Version of log.
                        - show only first 7 letters.
                   $ git log --online -3
                        - Show First 3 commit.          

