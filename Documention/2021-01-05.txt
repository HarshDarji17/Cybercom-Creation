                                         GIT & GITHUB

1.REPOSITORY
   
       Each User has a local copy of the complete history of project.

       Repositories can be divided into two types based on the usage on a server.
    

2.INITIALIZING A REPOSITORY
     
       Syntax:

             $ git init

       --The git init command creates a new Git repository. It can be used to convert an existing,
         unversioned project to a Git repository or initialize a new, empty repository.    

3.STAGING AND COMMITING CODE
     
     * Working Area or Staging of a Git Repository:
       
      -- Untracked: In this stage, the Git repository is unable to track the file,
                    which means that the file is never staged nor it is committed.

      -- Tracked: When the Git repository tracks a file, 
                   which means the file is committed but is not staged in the working directory.

      -- Staged: In this stage, the file is ready to be committed and 
                  is placed in the staging area waiting for the next commit.

      -- Modified/Dirty: When the changes are made to the file
                        i.e. the file is modified but the change is not yet staged.

          3.1: *CHECKING THE STATUS
    
               Syntax:

                      $ git status

          3.2:  *STAGING FILES

              --  This process is done by the use of git add command. 
              --  When the changes have been made in the Working Tree/Area.
              --  These changes need to be added to the Staging Area for further modification of the file.
              --  git add command adds the file in the local repository. 
           
              Syntax:
                       $ git add File-name

           *Different ways to use add command:

                        $ git add        -To add a specific list of files to staging area.
                        $ git add *.txt  -To add all text files of the current directory to staging area.
                        $ git add --all  -To add all files of current directory to staging area.

          3.3: *MAKING COMMITS
                 
             Syntax:
                     $ git commit -m "Add existing file"
        

          4.BRANCHES

                --  A branch can be interpretd as an individual timeline of our project commits.

                --  When we initialize a repository and start making ommits,
                    they are saved to the master branch by default

     4.1: CREATING A NEW BRANCH

             Syntax:
                      $ git branch <new_branch_name>

     4.2: CHANGING BRANCHES

                -- To switch to different branch,you use the git checkout command.
            
             Syntax:

                      $ git checkout <branch_name>

               --  To create a new branch and change to it at the same time,you can use the -b flag.

               Syntax:
                       $ git checkout -b <branch_name>

    4.3:  MERGING BRANCHES
      
           Syntax:

                      $  git merge <branch_name>

    4.4:  DELETING A BRANCH

           Syantax:

                      $  git branch -d <branch_name>

     5. CHANGES MADE
         
           -- We can see the changes that user have done in a particular file before COMMITING by using the command:

             Syntax:

                     $   git diff <file_name>


           --  We can also see the changes using the commit hash code using the command
              Syntax:
 
                     $   git show <commit-hash>
          

                                  * GENERATE SSH KEY *

            * SSH  -- SECURE SHELL HASH
                  --used for authentication
                  --By setting ssh key you can connect to Gitlab server without using username and password each time.

                --  Open gitbash command and write the command to get your ssh key
                 Syntax:
                        $ ssh-keygen

                   -- You can also write in this way also:
      
                  Syntax:

                       $ sssh-keygen -t rsa -b 4096 -C "username or email"

                                         here, "-t" flags stand for the type
                                              "-b" flags stand for number of bytes
                                              "-C" flags stand for label that we want to create keygen with

        Example: $ssh-keygen -t rsa -b 4096 -C "harsh@gmail.com"

        NOW,your key is generated in the corresponding folder copy it and goes to your github account and then go
        to setting and the go to SSH and GPG keys and paste your key and then click on submit.


                                      * GITHUB *

    1.WHAT IS GITHUB?
        -- GitHub is a web-based Git repository hosting service.
        -- GitHub is maintained by microsoft.
        -- GitHub is focused on centralized source code hosting.
        -- Git is the version control system,the tools that tracks changes to our files over time.
        -- Github is hosting service for project that use git.

   2.CREATING A GITHUB REPOSITORY

           --   To create a new git repository go to github.com and 
               on the right hand side click the + symbol then click on create repository.

       * You can set your repository to be PUBLIC or PRIVATE.
             -PUBLIC: it means anyone can see the new repository.
             -PRIVATE: you can manuaaly choose who can access the new repository.

      After you set your repository then you have to push your code:

        2.1: PUSHING YOUR CODE TO THE GITHUB REPOSITORY

        COMMON/WORKFLOW:
          1.Commit your code locally
          2.Go to github and make a new repositoy
          3.Connect you local repo to the githuib repo(add a remote)
          4.Push your code upto github using the new remote

        --  To push an exisiting repo:
           git remote add origin <url>
           git push -u origin master

     NOTE:
             git remote                 "Will tell you the remote name"
             git remote -v              "This will list all the remote that i have"

        --If you don't have any remote then you can add the remote using the command

           Syntax:
                    $  git remote add origin <url>
 
         --You don't have to name the remote "origin" but is standard if you only have a single remote
            Now if you want to push your code to github as your remote is added you use command:
            Syntax:
                    $  git push -u origin master

                                here, "-u" flag is only necessary for the first time you push
                                      "origin" is the remote name
                                      "master" is the branchname that you want to push you can write your branch name here.

     3.CLONING AN EXISITING REPOSITORY   
   
         Syntax:
                   $  git clone <url>

    4.PULL CHANGES FROM GITHUB
                 
         Syntax:
          
                   $  git pull origin master        

